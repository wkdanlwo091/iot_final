/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2020-04-27 08:12:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/wkdan/Desktop/final_iot/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/top/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1575513783315L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n");
      out.write("\t<title>Login</title>\n");
      out.write("\t<meta content='width=device-width, initial-scale=1.0, shrink-to-fit=no' name='viewport' />\n");
      out.write("\t<link rel=\"icon\" href=\"assets/img/icon.ico\" type=\"image/x-icon\"/>\n");
      out.write("\n");
      out.write("\t<!-- Fonts and icons -->\n");
      out.write("\t<script src=\"assets/js/plugin/webfont/webfont.min.js\"></script>\n");
      out.write("\t<script>\n");
      out.write("\t\tWebFont.load({\n");
      out.write("\t\t\tgoogle: {\"families\":[\"Open+Sans:300,400,600,700\"]},\n");
      out.write("\t\t\tcustom: {\"families\":[\"Flaticon\", \"Font Awesome 5 Solid\", \"Font Awesome 5 Regular\", \"Font Awesome 5 Brands\"], urls: ['assets/css/fonts.css']},\n");
      out.write("\t\t\tactive: function() {\n");
      out.write("\t\t\t\tsessionStorage.fonts = true;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t</script>\n");
      out.write("\t\n");
      out.write("\t<!-- CSS Files -->\n");
      out.write("\t<link rel=\"stylesheet\" href=\"assets/css/bootstrap.min.css\">\n");
      out.write("\t<link rel=\"stylesheet\" href=\"assets/css/azzara.min.css\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body class=\"login\">\n");
      out.write("\t<div class=\"wrapper wrapper-login\">\n");
      out.write("\t\t<div class=\"container container-login animated fadeIn\">\n");
      out.write("\t\t\t<h3 class=\"text-center\">LOGIN</h3>\n");
      out.write("\t\t\t<div class=\"login-form\">\n");
      out.write("\t\t\t<form class=\"loginform\" action=\"loginimpl.top\" method=\"post\"\n");
      out.write("\t\t\t\tnovalidate=\"novalidate\">\t\n");
      out.write("\t\t\t\t\t<!--  ID 입력 START -->\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t\t\t<label for=\"ID\" class=\"placeholder\"><b>ID</b></label> <input\n");
      out.write("\t\t\t\t\t\t\tid=\"ID\" name=\"ID\" type=\"text\" class=\"form-control\" required>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t<!--  ID 입력 END -->\n");
      out.write("\n");
      out.write("\t\t\t\t\t<!--  PASSWORD 입력 START -->\n");
      out.write("\t\t\t\t\t<div class=\"form-group\">\n");
      out.write("\t\t\t\t\t\t<label for=\"password\" class=\"placeholder\"><b>Password</b></label>\n");
      out.write("\t\t\t\t\t\t<a href=\"#\" class=\"link float-right\">Forget Password ?</a>\n");
      out.write("\t\t\t\t\t\t<div class=\"position-relative\">\n");
      out.write("\t\t\t\t\t\t\t<input id=\"password\" name=\"password\" type=\"password\"\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"form-control\" required>\n");
      out.write("\t\t\t\t\t\t\t<div class=\"show-password\">\n");
      out.write("\t\t\t\t\t\t\t\t<i class=\"flaticon-interface\"></i>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t<!--  PASSWORD 입력 END -->\n");
      out.write("\n");
      out.write("\t\t\t\t\t<!-- 마지막 제출하기 구간 START -->\n");
      out.write("\t\t\t\t\t<div class=\"form-group form-action-d-flex mb-3\">\n");
      out.write("\t\t\t\t\t\t<div class=\"custom-control custom-checkbox\">\n");
      out.write("\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"custom-control-input\"\n");
      out.write("\t\t\t\t\t\t\t\tid=\"rememberme\"> <label class=\"custom-control-label m-0\"\n");
      out.write("\t\t\t\t\t\t\t\tfor=\"rememberme\">Remember Me</label>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t<button\n");
      out.write("\t\t\t\t\t\t\tclass=\"btn btn-primary col-md-5 float-right mt-3 mt-sm-0 fw-bold\"\n");
      out.write("\t\t\t\t\t\t\ttype=\"submit\" value=\"submit\" class=\"btn_3\">log in</button>\n");
      out.write("\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t\t\t<div class=\"login-account\">\n");
      out.write("\t\t\t\t\t\t<span class=\"msg\">Don't have an account yet ?</span> <a href=\"#\"\n");
      out.write("\t\t\t\t\t\t\tid=\"show-signup\" class=\"link\">Sign Up</a>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t<!-- 마지막 제출하기 구간 END -->\n");
      out.write("\t\t\t</form>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\t<script src=\"assets/js/core/jquery.3.2.1.min.js\"></script>\n");
      out.write("\t<script src=\"assets/js/plugin/jquery-ui-1.12.1.custom/jquery-ui.min.js\"></script>\n");
      out.write("\t<script src=\"assets/js/core/popper.min.js\"></script>\n");
      out.write("\t<script src=\"assets/js/core/bootstrap.min.js\"></script>\n");
      out.write("\t<script src=\"assets/js/ready.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
